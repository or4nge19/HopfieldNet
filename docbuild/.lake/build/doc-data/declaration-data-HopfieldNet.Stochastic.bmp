{"name":"HopfieldNet.Stochastic","instances":[{"typeNames":["Eq"],"name":"decidableEqState","className":"Decidable"},{"typeNames":["Real","Real"],"name":"instCoeReal_hopfieldNet","className":"Coe"}],"imports":["Init","HopfieldNet.HN.Asym","Mathlib.Probability.ProbabilityMassFunction.Basic","Mathlib.Probability.ProbabilityMassFunction.Constructions","Mathlib.LinearAlgebra.Matrix.PosDef","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1541-L1555","name":"uniform_neuron_selection_prob_valid","line":1541,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#uniform_neuron_selection_prob_valid","doc":"Uniform neuron selection gives a valid PMF "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#uniform_neuron_selection_prob_valid\"><span class=\"name\">uniform_neuron_selection_prob_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">p</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">U</span>) =&gt; <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span></span>;\n<span class=\"fn\">∑ <span class=\"fn\">a</span> : <span class=\"fn\">U</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1521-L1539","name":"uniform_neuron_prob","line":1521,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#uniform_neuron_prob","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#uniform_neuron_prob\"><span class=\"name\">uniform_neuron_prob</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">U</span>) =&gt; <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span>)</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1500-L1519","name":"gibbs_update_preserves_other_sites","line":1500,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_update_preserves_other_sites","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_update_preserves_other_sites\"><span class=\"name\">gibbs_update_preserves_other_sites</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvu</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_next</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s_next</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s_next</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1479-L1498","name":"single_site_difference_as_update","line":1479,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#single_site_difference_as_update","doc":"When states differ at exactly one site, the later state can be expressed as\nan update of the first state at that site "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#single_site_difference_as_update\"><span class=\"name\">single_site_difference_as_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_diff_at_u</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_same_elsewhere</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1449-L1477","name":"gibbs_transition_sum_simplification","line":1449,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_transition_sum_simplification","doc":"When calculating the transition probability sum, only the term for the\ndiffering site contributes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_transition_sum_simplification\"><span class=\"name\">gibbs_transition_sum_simplification</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_diff</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">neuron_pmf</span> := <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">U</span>) =&gt; <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span>)</span> <span class=\"fn\">⋯</span></span>;\n<span class=\"fn\">let <span class=\"fn\">update_prob</span> := <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s'</span></span></span>;\n<span class=\"fn\">∑ <span class=\"fn\">v</span> : <span class=\"fn\">U</span>, <span class=\"fn\"><span class=\"fn\">neuron_pmf</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">update_prob</span> <span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">neuron_pmf</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">update_prob</span> <span class=\"fn\">u</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1410-L1447","name":"gibbs_update_zero_other_sites","line":1410,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_update_zero_other_sites","doc":"When states differ at site u, the probability of transitioning to s' by updating\nany other site v is zero "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_update_zero_other_sites\"><span class=\"name\">gibbs_update_zero_other_sites</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">w</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_diff</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1393-L1408","name":"uniform_neuron_selection_prob","line":1393,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#uniform_neuron_selection_prob","doc":"The probability of selecting a specific neuron in the uniform distribution is 1/|U| "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#uniform_neuron_selection_prob\"><span class=\"name\">uniform_neuron_selection_prob</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">p</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">U</span>) =&gt; <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">neuron_pmf</span> := <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">p</span> <span class=\"fn\">⋯</span></span>;\n<span class=\"fn\"><span class=\"fn\">neuron_pmf</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">U</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1376-L1391","name":"single_site_transition_as_update","line":1376,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#single_site_transition_as_update","doc":"When states differ at exactly one site, the later state can be expressed as\nan update of the first state at that site "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#single_site_transition_as_update\"><span class=\"name\">single_site_transition_as_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1347-L1374","name":"gibbs_update_single_neuron_prob","line":1347,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_update_single_neuron_prob","doc":"Computes the probability of updating a neuron to a specific value using Gibbs sampling.\n- If new_val = 1: probability = exp(local_field/T)/Z\n- If new_val = -1: probability = exp(-local_field/T)/Z\nwhere Z is the normalization constant (partition function).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_update_single_neuron_prob\"><span class=\"name\">gibbs_update_single_neuron_prob</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">new_val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">new_val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">Z</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">new_val</span> <span class=\"fn\">hval</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">new_val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span>\n  <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1333-L1345","name":"hopfield_value_dichotomy","line":1333,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#hopfield_value_dichotomy","doc":"In a Hopfield network, activation values can only be 1 or -1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#hopfield_value_dichotomy\"><span class=\"name\">hopfield_value_dichotomy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span> → <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1295-L1331","name":"gibbsUpdate_prob_negative","line":1295,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_prob_negative","doc":"The probability of updating a neuron to -1 using Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_prob_negative\"><span class=\"name\">gibbsUpdate_prob_negative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">Z</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1259-L1293","name":"gibbsUpdate_prob_positive","line":1259,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_prob_positive","doc":"The probability of updating a neuron to 1 using Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_prob_positive\"><span class=\"name\">gibbsUpdate_prob_positive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">Z</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1208-L1257","name":"gibbsUpdate_pmf_structure","line":1208,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_pmf_structure","doc":"PMF map from boolean values to updated states preserves probability structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_pmf_structure\"><span class=\"name\">gibbsUpdate_pmf_structure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\"><span class=\"fn\">probs</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span></span>;\n<span class=\"fn\">∀ (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>),\n  <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\">gibbs_bool_to_state_map</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">norm_probs</span> <span class=\"fn\">⋯</span>)</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\">gibbs_bool_to_state_map</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">norm_probs</span> <span class=\"fn\">b</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1172-L1206","name":"gibbs_prob_negative_case","line":1172,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_negative_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_negative_case\"><span class=\"name\">gibbs_prob_negative_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">Z</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span>\n  <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\">gibbs_bool_to_state_map</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">norm_probs</span> <span class=\"fn\">⋯</span>)</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">norm_probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1133-L1169","name":"gibbs_prob_positive_case","line":1133,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_positive_case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_positive_case\"><span class=\"name\">gibbs_prob_positive_case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span>;\n<span class=\"fn\">let <span class=\"fn\">Z</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span>\n  <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">Z</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\">gibbs_bool_to_state_map</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">norm_probs</span> <span class=\"fn\">⋯</span>)</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">norm_probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1117-L1130","name":"gibbs_bool_to_state_map_negative","line":1117,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map_negative","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map_negative\"><span class=\"name\">gibbs_bool_to_state_map_negative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> → <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1101-L1115","name":"gibbs_bool_to_state_map_positive","line":1101,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map_positive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map_positive\"><span class=\"name\">gibbs_bool_to_state_map_positive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> → <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1071-L1099","name":"gibbs_prob_negative","line":1071,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_negative","doc":"The probability of setting a neuron to -1 under Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_negative\"><span class=\"name\">gibbs_prob_negative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>)</span>))</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1041-L1069","name":"gibbs_prob_positive","line":1041,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_positive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_positive\"><span class=\"name\">gibbs_prob_positive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>)</span>))</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1033-L1039","name":"ENNReal.div_ne_top","line":1033,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#ENNReal.div_ne_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#ENNReal.div_ne_top\"><span class=\"name\">ENNReal</span>.<span class=\"name\">div_ne_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L1001-L1031","name":"ENNReal_exp_ratio_to_sigmoid","line":1001,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#ENNReal_exp_ratio_to_sigmoid","doc":"Converts the ratio of Boltzmann factors to ENNReal sigmoid form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#ENNReal_exp_ratio_to_sigmoid\"><span class=\"name\">ENNReal_exp_ratio_to_sigmoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>))</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L983-L999","name":"local_field_eq_weighted_sum","line":983,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#local_field_eq_weighted_sum","doc":"Local field is the weighted sum of incoming activations "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#local_field_eq_weighted_sum\"><span class=\"name\">local_field_eq_weighted_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">v</span> ∈ <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a>.<a href=\"./Mathlib/Data/Finset/Erase.html#Finset.erase\">erase</a></span> <span class=\"fn\">u</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L966-L981","name":"exp_ratio_to_sigmoid","line":966,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#exp_ratio_to_sigmoid","doc":"Expresses a ratio of exponentials in terms of the sigmoid function format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#exp_ratio_to_sigmoid\"><span class=\"name\">exp_ratio_to_sigmoid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L955-L964","name":"pmf_map_update_neg_one","line":955,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_map_update_neg_one","doc":"A specialized version for the case where the state is an update with new_val = -1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_map_update_neg_one\"><span class=\"name\">pmf_map_update_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_sum</span> : <span class=\"fn\">∑ <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">p</span> <span class=\"fn\">h_sum</span>)</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L944-L953","name":"pmf_map_update_one","line":944,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_map_update_one","doc":"A specialized version of the previous lemma for the case where the state is an update with new_val = 1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_map_update_one\"><span class=\"name\">pmf_map_update_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_sum</span> : <span class=\"fn\">∑ <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">p</span> <span class=\"fn\">h_sum</span>)</span>)</span> <span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L870-L942","name":"pmf_map_binary_state","line":870,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_map_binary_state","doc":"For a PMF over binary values mapped to states, the probability of a specific state\nequals the probability of its corresponding binary value "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_map_binary_state\"><span class=\"name\">pmf_map_binary_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_sum</span> : <span class=\"fn\">∑ <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span>;\n<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">p</span> <span class=\"fn\">h_sum</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L852-L868","name":"gibbs_prob_false","line":852,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_false","doc":"The probability mass assigned to false when using Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_false\"><span class=\"name\">gibbs_prob_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\"><span class=\"fn\">probs</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span></span>;\n<span class=\"fn\"><span class=\"fn\">norm_probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a>     (<span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L832-L850","name":"gibbs_prob_true","line":832,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_prob_true","doc":"The probability mass assigned to true when using Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_prob_true\"><span class=\"name\">gibbs_prob_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\"><span class=\"fn\">probs</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span></span>;\n<span class=\"fn\"><span class=\"fn\">norm_probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a>     (<span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L818-L830","name":"gibbs_normalization_factor","line":818,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_normalization_factor","doc":"The normalization factor in Gibbs sampling is the sum of Boltzmann\nfactors for both possible states "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_normalization_factor\"><span class=\"name\">gibbs_normalization_factor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">total</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L778-L816","name":"pmf_filter_update_neuron","line":778,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_filter_update_neuron","doc":"When filtering a PMF with binary support to states matching a given state's update,\nthe result reduces to a singleton if the update site matches "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_filter_update_neuron\"><span class=\"name\">pmf_filter_update_neuron</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">f</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span>;\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> | <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span></span>}</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><a href=\"./Init/Prelude.html#Bool.true\">true</a><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><a href=\"./Init/Prelude.html#Bool.false\">false</a><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L750-L776","name":"bool_update_eq_iff","line":750,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#bool_update_eq_iff","doc":"Determines when a boolean-indexed update equals a specific update "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#bool_update_eq_iff\"><span class=\"name\">bool_update_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L728-L748","name":"update_neuron_eq_iff","line":728,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#update_neuron_eq_iff","doc":"Two neuron updates at the same site are equal if and only if\ntheir new values are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#update_neuron_eq_iff\"><span class=\"name\">update_neuron_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val₁ </span><span class=\"fn\">val₂</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val₁</span> <span class=\"fn\">hval₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val₂</span> <span class=\"fn\">hval₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">val₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">val₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L709-L726","name":"different_activation_different_state","line":709,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#different_activation_different_state","doc":"Updates with different activation values produce different states "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#different_activation_different_state\"><span class=\"name\">different_activation_different_state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L692-L707","name":"update_neuron_equiv","line":692,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#update_neuron_equiv","doc":"When updating a neuron with a value that equals one of the\nstandard values (1 or -1), the result equals the standard update "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#update_neuron_equiv\"><span class=\"name\">update_neuron_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> → <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L661-L690","name":"pmf_binary_norm_sum_one","line":661,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_binary_norm_sum_one","doc":"The probability mass function for a binary choice (true/false)\nhas sum 1 when properly normalized "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_binary_norm_sum_one\"><span class=\"name\">pmf_binary_norm_sum_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\"><span class=\"fn\">probs</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span></span>;\n<span class=\"fn\">∑ <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>, <span class=\"fn\"><span class=\"fn\">norm_probs</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L644-L659","name":"single_site_is_update","line":644,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#single_site_is_update","doc":"Given a single-site difference, the destination state is\nan update of the source state "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#single_site_is_update\"><span class=\"name\">single_site_is_update</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">u</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L619-L642","name":"single_site_difference_unique","line":619,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#single_site_difference_unique","doc":"For states differing at only one site, that site must be u "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#single_site_difference_unique\"><span class=\"name\">single_site_difference_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_diff</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">s'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">v</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">U</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L600-L617","name":"gibbsUpdate_preserves_other_neurons","line":600,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_preserves_other_neurons","doc":"Gibbs update preserves states at non-updated sites "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_preserves_other_neurons\"><span class=\"name\">gibbsUpdate_preserves_other_neurons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_neq</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_next</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s_next</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s_next</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L575-L598","name":"gibbsUpdate_possible_states","line":575,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_possible_states","doc":"For states with positive probability under gibbsUpdateSingleNeuron,\nthey must be one of exactly two possible states (with neuron v set to 1 or -1) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_possible_states\"><span class=\"name\">gibbsUpdate_possible_states</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_next</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s_next</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> →\n  <span class=\"fn\">s_next</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">v</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">s_next</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">v</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L543-L573","name":"gibbsUpdate_exists_bool","line":543,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbsUpdate_exists_bool","doc":"For states with positive Gibbs update probability, there exists a boolean variable that\ndetermines whether the state has activation 1 or -1 at the updated neuron "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsUpdate_exists_bool\"><span class=\"name\">gibbsUpdate_exists_bool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_next</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\">NN.State.gibbsUpdateSingleNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">wθ</span> <span class=\"fn\">T</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">s_next</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>), <span class=\"fn\">s_next</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\">gibbs_bool_to_state_map</a> <span class=\"fn\">s</span> <span class=\"fn\">v</span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L533-L541","name":"pmf_map_pos_implies_preimage","line":533,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#pmf_map_pos_implies_preimage","doc":"For a positive PMF.map application, there exists a preimage with positive probability "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#pmf_map_pos_implies_preimage\"><span class=\"name\">pmf_map_pos_implies_preimage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_pmf</span> : <span class=\"fn\">∑ <span class=\"fn\">a</span> : <span class=\"fn\">α</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.map\">PMF.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#PMF.ofFintype\">PMF.ofFintype</a> <span class=\"fn\">p</span> <span class=\"fn\">h_pmf</span>)</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L522-L531","name":"gibbs_total_not_top","line":522,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_total_not_top","doc":"The total normalization constant for Gibbs sampling is not infinity "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_total_not_top\"><span class=\"name\">gibbs_total_not_top</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L502-L520","name":"gibbs_total_positive","line":502,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_total_positive","doc":"The total normalization constant for Gibbs sampling is positive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_total_positive\"><span class=\"name\">gibbs_total_positive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">local_field </span><span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">local_field</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L493-L500","name":"gibbs_bool_to_state_map","line":493,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map","doc":"The function that maps boolean values to states in Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_bool_to_state_map\"><span class=\"name\">gibbs_bool_to_state_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L463-L491","name":"gibbs_probs_sum_one","line":463,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#gibbs_probs_sum_one","doc":"For Gibbs updates, given the normalization and probabilities, the sum of normalized probabilities equals 1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbs_probs_sum_one\"><span class=\"name\">gibbs_probs_sum_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">local_field</span> := <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.net\">NeuralNetwork.State.net</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span> <span class=\"fn\">v</span></span>;\n<span class=\"fn\">let <span class=\"fn\">probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt;\n  <span class=\"fn\">let <span class=\"fn\">new_act_val</span> := <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>;\n  <span class=\"fn\"><a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal.ofReal\">ENNReal.ofReal</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">local_field</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">new_act_val</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">T</span>))</span></span></span></span>;\n<span class=\"fn\">let <span class=\"fn\">total</span> := <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">probs</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>;\n<span class=\"fn\">let <span class=\"fn\">norm_probs</span> := <span class=\"fn\">fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\"><span class=\"fn\">probs</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">total</span></span>;\n<span class=\"fn\">∑ <span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>, <span class=\"fn\"><span class=\"fn\">norm_probs</span> <span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L453-L461","name":"updateNeuron_preserves","line":453,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#updateNeuron_preserves","doc":"The updateNeuron function only changes the specified neuron, leaving others unchanged "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#updateNeuron_preserves\"><span class=\"name\">updateNeuron_preserves</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\">NN.State.updateNeuron</a> <span class=\"fn\">s</span> <span class=\"fn\">v</span> <span class=\"fn\">val</span> <span class=\"fn\">hval</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L445-L451","name":"state_equality_from_sites","line":445,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#state_equality_from_sites","doc":"States that are equal at all sites are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#state_equality_from_sites\"><span class=\"name\">state_equality_from_sites</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s'</span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L416-L443","name":"single_site_difference","line":416,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#single_site_difference","doc":"When states differ at exactly one site, we can identify that site "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#single_site_difference\"><span class=\"name\">single_site_difference</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ (<span class=\"fn\">u</span> : <span class=\"fn\">U</span>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">u</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">U</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L410-L414","name":"total_variation_distance","line":410,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#total_variation_distance","doc":"Total variation distance between probability distributions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#total_variation_distance\"><span class=\"name\">total_variation_distance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L404-L408","name":"metropolisTransitionProb","line":404,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#metropolisTransitionProb","doc":"The transition probability matrix for Metropolis-Hastings "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#metropolisTransitionProb\"><span class=\"name\">metropolisTransitionProb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L398-L402","name":"gibbsTransitionProb","line":398,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#gibbsTransitionProb","doc":"The transition probability matrix for Gibbs sampling "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#gibbsTransitionProb\"><span class=\"name\">gibbsTransitionProb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L392-L396","name":"boltzmannDistribution","line":392,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#boltzmannDistribution","doc":"The Boltzmann (Gibbs) distribution over neural network states "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#boltzmannDistribution\"><span class=\"name\">boltzmannDistribution</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L382-L390","name":"NN.State.metropolisHastingsSteps","line":382,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.metropolisHastingsSteps","doc":"Multiple steps of Metropolis-Hastings algorithm for Hopfield networks "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.metropolisHastingsSteps\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">metropolisHastingsSteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L350-L380","name":"NN.State.metropolisHastingsStep","line":350,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.metropolisHastingsStep","doc":"Metropolis-Hastings single step for Hopfield networks "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.metropolisHastingsStep\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">metropolisHastingsStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L342-L348","name":"NN.State.partitionFunction","line":342,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.partitionFunction","doc":"The partition function for a Hopfield network, defined as the sum over all possible states\nof the Boltzmann factor `exp(-E/T)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.partitionFunction\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">partitionFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L326-L340","name":"NN.State.acceptanceProbability","line":326,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.acceptanceProbability","doc":"Given a HopfieldNetwork with parameters `wθ` and temperature `T`, computes the acceptance probability\nfor transitioning from a `current` state to a `proposed` state according to the Metropolis-Hastings algorithm.\n\n* If the energy difference (ΔE) is negative or zero, returns 1.0 (always accepts the transition)\n* If the energy difference is positive, returns exp(-ΔE/T) following the Boltzmann distribution\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.acceptanceProbability\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">acceptanceProbability</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">current </span><span class=\"fn\">proposed</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L313-L324","name":"NN.State.simulatedAnnealing","line":313,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.simulatedAnnealing","doc":"`NN.State.simulatedAnnealing` implements the simulated annealing optimization algorithm for a Hopfield Network.\nThis function performs simulated annealing by starting from an initial state and gradually reducing\nthe temperature according to an exponential cooling schedule, allowing the system to explore the\nstate space and eventually settle into a low-energy configuration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.simulatedAnnealing\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">simulatedAnnealing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initial_temp </span><span class=\"fn\">cooling_rate</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initial_state</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L292-L311","name":"applyAnnealingSteps","line":292,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#applyAnnealingSteps","doc":"Recursively applies Gibbs sampling steps with decreasing temperature according to\nthe cooling schedule, terminating when the step count reaches the target number of steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#applyAnnealingSteps\"><span class=\"name\">applyAnnealingSteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">temp_schedule</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L288-L290","name":"temperatureSchedule","line":288,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#temperatureSchedule","doc":"Temperature schedule for simulated annealing that decreases exponentially with each step. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#temperatureSchedule\"><span class=\"name\">temperatureSchedule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initial_temp </span><span class=\"fn\">cooling_rate</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L274-L286","name":"NN.State.gibbsSamplingSteps","line":274,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.gibbsSamplingSteps","doc":"Performs multiple steps of Gibbs sampling in a Hopfield network, starting from\nan initial state. Each step involves:\n1. First recursively applying previous steps (if any)\n2. Then performing a single Gibbs sampling step on the resulting state\nThe temperature parameter T controls the randomness of the updates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsSamplingSteps\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">gibbsSamplingSteps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L249-L272","name":"patternStochasticUpdate","line":249,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#patternStochasticUpdate","doc":"Perform a stochastic update on a Pattern representation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#patternStochasticUpdate\"><span class=\"name\">patternStochasticUpdate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weights</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_diag_zero</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">weights</span> <span class=\"fn\">i</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_sym</span> : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">weights</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">weights</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L237-L247","name":"HopfieldNetwork.all_nodes_adjacent","line":237,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#HopfieldNetwork.all_nodes_adjacent","doc":"In a Hopfield network, two neurons are adjacent if and only if they are different.\nThis formalizes the fully connected nature of Hopfield networks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#HopfieldNetwork.all_nodes_adjacent\"><span class=\"name\">HopfieldNetwork</span>.<span class=\"name\">all_nodes_adjacent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Digraph/Basic.html#Digraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L212-L235","name":"Array.mkArray_creates_valid_hopfield_params","line":212,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#Array.mkArray_creates_valid_hopfield_params","doc":"Proves that `Array.mkArray` creates valid parameters for a Hopfield network.\nGiven a vertex `u` in a Hopfield network with `n` nodes, this lemma establishes that:\n1. The array `σ_u` has size equal to `κ1 u`\n2. The array `θ_u` has size equal to `κ2 u`\n3. All elements in `σ_u` are initialized to 0\n4. All elements in `θ_u` are initialized to 0\nwhere `κ1` and `κ2` are dimension functions defined in the `HopfieldNetwork` structure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#Array.mkArray_creates_valid_hopfield_params\"><span class=\"name\">Array</span>.<span class=\"name\">mkArray_creates_valid_hopfield_params</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">σ_u</span> := <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.replicate\">replicate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.κ1\">κ1</a></span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">0</span></span>;\n<span class=\"fn\">let <span class=\"fn\">θ_u</span> := <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.replicate\">replicate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.κ2\">κ2</a></span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">0</span></span>;\n<span class=\"fn\"><span class=\"fn\">σ_u</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.κ1\">κ1</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>   <span class=\"fn\"><span class=\"fn\">θ_u</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.κ2\">κ2</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">σ_u</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>), <span class=\"fn\">σ_u</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">θ_u</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>), <span class=\"fn\">θ_u</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L208-L210","name":"Array.mkArray_get","line":208,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#Array.mkArray_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#Array.mkArray_get\"><span class=\"name\">Array</span>.<span class=\"name\">mkArray_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Data/Array/Basic.html#Array.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L205-L206","name":"Array.mkArray_size","line":205,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#Array.mkArray_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#Array.mkArray_size\"><span class=\"name\">Array</span>.<span class=\"name\">mkArray_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Array/Basic.html#Array.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L204-L204","name":"instCoeReal_hopfieldNet","line":204,"kind":"instance","docLink":"./HopfieldNet/Stochastic.html#instCoeReal_hopfieldNet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#instCoeReal_hopfieldNet\"><span class=\"name\">instCoeReal_hopfieldNet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L179-L202","name":"NN.State.gibbsSamplingStep","line":179,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.gibbsSamplingStep","doc":"Given a Hopfield Network's parameters, temperature, and current state, performs a single step\nof Gibbs sampling by:\n1. Uniformly selecting a random neuron\n2. Updating that neuron's state according to the Gibbs distribution\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsSamplingStep\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">gibbsSamplingStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L176-L177","name":"ENNReal.«termℝ≥0∞_1»","line":176,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#ENNReal.«termℝ≥0∞_1»","doc":"The extended nonnegative real numbers. This is usually denoted [0, ∞],\nand is relevant as the codomain of a measure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#ENNReal.«termℝ≥0∞_1»\"><span class=\"name\">ENNReal</span>.<span class=\"name\">«termℝ≥0∞_1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L139-L174","name":"NN.State.gibbsUpdateSingleNeuron","line":139,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron","doc":"Update a single neuron according to Gibbs sampling rule "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateSingleNeuron\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">gibbsUpdateSingleNeuron</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L127-L137","name":"NN.State.updateNeuron","line":127,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.updateNeuron","doc":"Function to set a specific neuron state "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.updateNeuron\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">updateNeuron</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hval</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.pact\">pact</a></span> <span class=\"fn\">val</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L97-L125","name":"NN.State.gibbsUpdateNeuron","line":97,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateNeuron","doc":"Performs a Gibbs update on a single neuron `u` of the state `s`.\nThe update probability depends on the energy change associated with flipping the neuron's state,\nparameterized by the temperature `T`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.gibbsUpdateNeuron\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">gibbsUpdateNeuron</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L91-L95","name":"NN.State.metropolisDecision","line":91,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NN.State.metropolisDecision","doc":"Metropolis acceptance decision as a probability mass function over Boolean outcomes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NN.State.metropolisDecision\"><span class=\"name\">NN</span>.<span class=\"name\">State</span>.<span class=\"name\">metropolisDecision</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#PMF\">PMF</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L87-L89","name":"NeuralNetwork.StochasticDynamics","line":87,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NeuralNetwork.StochasticDynamics","doc":"Temperature-parameterized stochastic dynamics for neural networks "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NeuralNetwork.StochasticDynamics\"><span class=\"name\">NeuralNetwork</span>.<span class=\"name\">StochasticDynamics</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">NN</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork\">NeuralNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L84-L85","name":"NeuralNetwork.StatePMF","line":84,"kind":"def","docLink":"./HopfieldNet/Stochastic.html#NeuralNetwork.StatePMF","doc":"Probability Mass Function over Neural Network States "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#NeuralNetwork.StatePMF\"><span class=\"name\">NeuralNetwork</span>.<span class=\"name\">StatePMF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">NN</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork\">NeuralNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L74-L82","name":"energy_sum_split","line":74,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#energy_sum_split","doc":"Energy sum can be split into terms with u and terms without u "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#energy_sum_split\"><span class=\"name\">energy_sum_split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">v</span> : <span class=\"fn\">U</span>, <span class=\"fn\">∑ <span class=\"fn\">v2</span> : <span class=\"fn\">U </span>with <span class=\"fn\">v2</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v2</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">∑ <span class=\"fn\">v2</span> : <span class=\"fn\">U </span>with <span class=\"fn\">v2</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v2</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a>     <span class=\"fn\">∑ <span class=\"fn\">v</span> ∈ <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a>.<a href=\"./Mathlib/Data/Finset/Erase.html#Finset.erase\">erase</a></span> <span class=\"fn\">u</span></span>, <span class=\"fn\">∑ <span class=\"fn\">v2</span> : <span class=\"fn\">U </span>with <span class=\"fn\">v2</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">v2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L68-L72","name":"weight_symmetry","line":68,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#weight_symmetry","doc":"Weight matrix is symmetric in a Hopfield network "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#weight_symmetry\"><span class=\"name\">weight_symmetry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v1 </span><span class=\"fn\">v2</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">v1</span> <span class=\"fn\">v2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">wθ</span>.<a href=\"./HopfieldNet/NN.html#Params.w\">w</a></span> <span class=\"fn\">v2</span> <span class=\"fn\">v1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L60-L66","name":"energy_decomposition","line":60,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#energy_decomposition","doc":"Decompose energy into weight component and bias component "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#energy_decomposition\"><span class=\"name\">energy_decomposition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wθ</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/Core.html#NeuralNetwork.State.E\">NeuralNetwork.State.E</a> <span class=\"fn\">wθ</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./HopfieldNet/HN/Core.html#NeuralNetwork.State.Ew\">NeuralNetwork.State.Ew</a> <span class=\"fn\">wθ</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./HopfieldNet/HN/Core.html#NeuralNetwork.State.Eθ\">NeuralNetwork.State.Eθ</a> <span class=\"fn\">wθ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L54-L58","name":"decidableEqState","line":54,"kind":"instance","docLink":"./HopfieldNet/Stochastic.html#decidableEqState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#decidableEqState\"><span class=\"name\">decidableEqState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L44-L44","name":"State.ext_iff","line":44,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#State.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#State.ext_iff\"><span class=\"name\">State</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">NN</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork\">NeuralNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><span class=\"fn\">NN</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/Stochastic.lean#L43-L52","name":"State.ext","line":43,"kind":"theorem","docLink":"./HopfieldNet/Stochastic.html#State.ext","doc":"Extensionality lemma for neural network states "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/Stochastic.html#State.ext\"><span class=\"name\">State</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">NN</span> : <span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork\">NeuralNetwork</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><span class=\"fn\">NN</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">u</span> : <span class=\"fn\">U</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span>)</span> → <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"}]}