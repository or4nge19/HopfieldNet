{"name":"HopfieldNet.HN.test","instances":[{"typeNames":["NeuralNetwork.State"],"name":"instReprStateRatFinOfNatNatTest","className":"Repr"},{"typeNames":["NeuralNetwork.State"],"name":"instReprStateRatFinOfNatNatHopfieldNetwork","className":"Repr"}],"imports":["Init","HopfieldNet.HN.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L247-L248","name":"useq_Fin_fair","line":247,"kind":"theorem","docLink":"./HopfieldNet/HN/test.html#useq_Fin_fair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#useq_Fin_fair\"><span class=\"name\">useq_Fin_fair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/aux.html#fair\">fair</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/test.html#useq_Fin\">useq_Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L233-L245","name":"useq_Fin_cyclic","line":233,"kind":"theorem","docLink":"./HopfieldNet/HN/test.html#useq_Fin_cyclic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#useq_Fin_cyclic\"><span class=\"name\">useq_Fin_cyclic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/aux.html#cyclic\">cyclic</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/test.html#useq_Fin\">useq_Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L219-L231","name":"useq_Fin","line":219,"kind":"def","docLink":"./HopfieldNet/HN/test.html#useq_Fin","doc":"`useq_Fin n` maps a natural number `i` to an element of `Fin n` (a type with `n` elements).\nIt wraps `i` around using modulo `n`.\n\nArguments:\n- `n`: The size of the finite type (must be non-zero).\n- `i`: The natural number to convert.\n\nReturns:\n- An element of `Fin n`.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#useq_Fin\"><span class=\"name\">useq_Fin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L208-L217","name":"test_params","line":208,"kind":"def","docLink":"./HopfieldNet/HN/test.html#test_params","doc":"`test_params` sets up a `HopfieldNetwork` with 4 neurons.\nIt converts the patterns `ps` into a network using Hebbian learning if possible.\nIf not, it defaults to `ZeroParams_4`.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#test_params\"><span class=\"name\">test_params</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L203-L206","name":"ps","line":203,"kind":"def","docLink":"./HopfieldNet/HN/test.html#ps","doc":"`ps` are two patterns represented by a 2x4 matrix of rational numbers.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#ps\"><span class=\"name\">ps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span></span> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L176-L201","name":"ZeroParams_4","line":176,"kind":"def","docLink":"./HopfieldNet/HN/test.html#ZeroParams_4","doc":"`ZeroParams_4` defines a simple Hopfield Network with 4 neurons.\n\n- `w`: A 4x4 weight matrix filled with zeros.\n- `hw`: Proof that the weight matrix is symmetric.\n- `hw'`: Proof that the weight matrix has zeros on the diagonal.\n- `σ`: An empty vector for each neuron.\n- `θ`: A threshold of 0 for each neuron, with proof that the list has length 1.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#ZeroParams_4\"><span class=\"name\">ZeroParams_4</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L166-L174","name":"patternsOfVecs","line":166,"kind":"def","docLink":"./HopfieldNet/HN/test.html#patternsOfVecs","doc":"Converts a matrix of patterns `V` into Hopfield network states.\n\nEach row of `V` (a function `Fin m → Fin n → ℚ`) is mapped to a Hopfield network state\nif all elements are either `1` or `-1`. Returns `some` mapping if successful, otherwise `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#patternsOfVecs\"><span class=\"name\">patternsOfVecs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmn</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L154-L163","name":"obviousFunction","line":154,"kind":"def","docLink":"./HopfieldNet/HN/test.html#obviousFunction","doc":"`obviousFunction` tries to convert a function `f` from `α` to `Option β` into a regular function\nfrom `α` to `β`. If `f` returns `some` for every input, it returns `some` function that extracts\nthese values. Otherwise, it returns `none`.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#obviousFunction\"><span class=\"name\">obviousFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L136-L152","name":"pattern_ofVec","line":136,"kind":"def","docLink":"./HopfieldNet/HN/test.html#pattern_ofVec","doc":"`pattern_ofVec` converts a pattern vector from `Fin n` to `ℚ` into a `State`\nfor a `HopfieldNetwork` with `n` neurons.\nIt checks if all elements are either 1 or -1. If they are, it returns `some`\n pattern; otherwise, it returns `none`.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#pattern_ofVec\"><span class=\"name\">pattern_ofVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L123-L124","name":"instReprStateRatFinOfNatNatHopfieldNetwork","line":123,"kind":"instance","docLink":"./HopfieldNet/HN/test.html#instReprStateRatFinOfNatNatHopfieldNetwork","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#instReprStateRatFinOfNatNatHopfieldNetwork\"><span class=\"name\">instReprStateRatFinOfNatNatHopfieldNetwork</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span>)</span>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L109-L121","name":"extu","line":109,"kind":"def","docLink":"./HopfieldNet/HN/test.html#extu","doc":"`extu` is the initial state for our `HebbianParamsTest` Hopfield network.\n- `act`: `[1, -1, -1, 1]` - initial activations.\n\nThis initializes the state for a Hopfield network test.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#extu\"><span class=\"name\">extu</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/Core.html#State'\">State'</a> <a href=\"./HopfieldNet/HN/test.html#HebbianParamsTest\">HebbianParamsTest</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L83-L107","name":"HebbianParamsTest","line":83,"kind":"def","docLink":"./HopfieldNet/HN/test.html#HebbianParamsTest","doc":"`HebbianParamsTest` defines a Hopfield Network with 4 neurons and rational weights.\n- `w`: The weight matrix `W1`.\n- `hw`: Proof that the weights are symmetric.\n- `hw'`: Proof that the weights are zero on the diagonal.\n- `σ`: Always an empty vector.\n- `θ`: Always returns a list with a single 0.\n-"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#HebbianParamsTest\"><span class=\"name\">HebbianParamsTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <span class=\"fn\">(<a href=\"./HopfieldNet/HN/Core.html#HopfieldNetwork\">HopfieldNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L79-L81","name":"W1","line":79,"kind":"def","docLink":"./HopfieldNet/HN/test.html#W1","doc":"A 4x4 matrix of rational numbers. -"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#W1\"><span class=\"name\">W1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">4</span>)</span> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L64-L69","name":"test.onlyUi","line":64,"kind":"theorem","docLink":"./HopfieldNet/HN/test.html#test.onlyUi","doc":"If `u` is not in the input neurons `Ui`, then `test.extu.act u` is zero."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#test.onlyUi\"><span class=\"name\">test</span>.<span class=\"name\">onlyUi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/test.html#test.extu\">extu</a>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.onlyUi\">onlyUi</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L61-L62","name":"zero_if_not_mem_Ui","line":61,"kind":"theorem","docLink":"./HopfieldNet/HN/test.html#zero_if_not_mem_Ui","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#zero_if_not_mem_Ui\"><span class=\"name\">zero_if_not_mem_Ui</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> ∉ <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">0</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">1</span><a href=\"./Init/Core.html#Insert.insert\">}</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/test.html#test.extu\">test.extu</a>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State.act\">act</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L56-L59","name":"test.extu","line":56,"kind":"def","docLink":"./HopfieldNet/HN/test.html#test.extu","doc":"`test.extu` is the initial state for the `test` neural network with activations `[1, 0, 0]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#test.extu\"><span class=\"name\">test</span>.<span class=\"name\">extu</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/HN/test.html#test\">test</a>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L51-L54","name":"instReprStateRatFinOfNatNatTest","line":51,"kind":"instance","docLink":"./HopfieldNet/HN/test.html#instReprStateRatFinOfNatNatTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#instReprStateRatFinOfNatNatTest\"><span class=\"name\">instReprStateRatFinOfNatNatTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\"><a href=\"./HopfieldNet/HN/test.html#test\">test</a>.<a href=\"./HopfieldNet/NN.html#NeuralNetwork.State\">State</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L41-L49","name":"wθ","line":41,"kind":"def","docLink":"./HopfieldNet/HN/test.html#wθ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#wθ\"><span class=\"name\">wθ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#Params\">Params</a> <a href=\"./HopfieldNet/HN/test.html#test\">test</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L16-L39","name":"test","line":16,"kind":"def","docLink":"./HopfieldNet/HN/test.html#test","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#test\"><span class=\"name\">test</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./HopfieldNet/NN.html#NeuralNetwork\">NeuralNetwork</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/mkaratarakis/HopfieldNet/blob/d669253cbe19c6ce4cd103939fa32fb81c26d54b/HopfieldNet/HN/test.lean#L13-L14","name":"test.M","line":13,"kind":"def","docLink":"./HopfieldNet/HN/test.html#test.M","doc":"A 3x3 matrix of rational numbers. -"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./HopfieldNet/HN/test.html#test.M\"><span class=\"name\">test</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span>)</span> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">ℚ</a></span></div></div>"}]}